// 拖拽排序组件，需要安装 @dnd-kit/core @dnd-kit/sortable @dnd-kit/utilities\n// npm install @dnd-kit/core @dnd-kit/sortable @dnd-kit/utilities\n\nimport React from 'react'\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragEndEvent,\n} from '@dnd-kit/core'\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable'\nimport {\n  useSortable,\n} from '@dnd-kit/sortable'\nimport { CSS } from '@dnd-kit/utilities'\nimport { GripVertical, X } from 'lucide-react'\nimport { Button } from '@/components/ui/Button'\nimport type { MeetingMaterial, MeetingSecurityLevel } from '@/types'\n\ninterface SortableItemProps {\n  id: string\n  material: MeetingMaterial\n  onRemove: (id: string) => void\n  onUpdateSecurity: (id: string, level: MeetingSecurityLevel) => void\n  getFileIcon: (fileName: string) => React.ReactNode\n}\n\nconst SortableItem: React.FC<SortableItemProps> = ({\n  id,\n  material,\n  onRemove,\n  onUpdateSecurity,\n  getFileIcon\n}) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id })\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n  }\n\n  const securityLevelOptions = [\n    { value: 'internal', label: '内部' },\n    { value: 'confidential', label: '秘密' },\n    { value: 'secret', label: '机密' }\n  ]\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      className={`flex items-center gap-3 p-2 rounded-md group ${\n        isDragging ? 'bg-blue-50 shadow-lg' : 'hover:bg-gray-50'\n      }`}\n    >\n      {/* 拖拽手柄 */}\n      <div\n        {...attributes}\n        {...listeners}\n        className=\"cursor-grab active:cursor-grabbing text-gray-400 hover:text-gray-600\"\n      >\n        <GripVertical className=\"h-4 w-4\" />\n      </div>\n\n      {/* 文件信息 */}\n      <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n        {getFileIcon(material.name)}\n        <span className=\"text-sm text-gray-900 truncate\" title={material.name}>\n          {material.name}\n        </span>\n      </div>\n\n      {/* 安全级别选择 */}\n      <select\n        value={material.securityLevel}\n        onChange={(e) => onUpdateSecurity(material.id, e.target.value as MeetingSecurityLevel)}\n        className=\"text-xs px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500\"\n      >\n        {securityLevelOptions.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </select>\n\n      {/* 删除按钮 */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={() => onRemove(material.id)}\n        className=\"h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity text-gray-400 hover:text-red-600\"\n      >\n        <X className=\"h-3 w-3\" />\n      </Button>\n    </div>\n  )\n}\n\ninterface SortableMaterialListProps {\n  materials: MeetingMaterial[]\n  onReorder: (newOrder: MeetingMaterial[]) => void\n  onRemoveMaterial: (materialId: string) => void\n  onUpdateMaterialSecurity: (materialId: string, securityLevel: MeetingSecurityLevel) => void\n  getFileIcon: (fileName: string) => React.ReactNode\n}\n\nconst SortableMaterialList: React.FC<SortableMaterialListProps> = ({\n  materials,\n  onReorder,\n  onRemoveMaterial,\n  onUpdateMaterialSecurity,\n  getFileIcon\n}) => {\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  )\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event\n\n    if (over && active.id !== over.id) {\n      const oldIndex = materials.findIndex(item => item.id === active.id)\n      const newIndex = materials.findIndex(item => item.id === over.id)\n      \n      const newOrder = arrayMove(materials, oldIndex, newIndex)\n      onReorder(newOrder)\n    }\n  }\n\n  if (materials.length === 0) {\n    return null\n  }\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex items-center gap-2\">\n        <GripVertical className=\"h-4 w-4 text-gray-400\" />\n        <span className=\"text-sm font-medium text-gray-700\">排序材料</span>\n      </div>\n      \n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragEnd={handleDragEnd}\n      >\n        <SortableContext items={materials.map(m => m.id)} strategy={verticalListSortingStrategy}>\n          <div className=\"space-y-1\">\n            {materials.map((material) => (\n              <SortableItem\n                key={material.id}\n                id={material.id}\n                material={material}\n                onRemove={onRemoveMaterial}\n                onUpdateSecurity={onUpdateMaterialSecurity}\n                getFileIcon={getFileIcon}\n              />\n            ))}\n          </div>\n        </SortableContext>\n      </DndContext>\n    </div>\n  )\n}\n\nexport default SortableMaterialList\n"